kubectl explain pods (to get Resource high level metadata)

kubectl explain pods --recursive (to get nested objects information also)

kubectl apply -f pod pod.yaml --dry-run=client (this is client side dry run)

kubectl apply -f pod pod.yaml --dry-run (this is server side dry run)

kubectl diff  -f pod.yaml (this will show the changes in pod.yaml as compared to deployed version)

kubectl exec myfirstpod -c container1 -it bash (to access container shell)
netstat -tulnp (to see open port and listen state)
netcat -l -p 8000 (this opens the port number to listen on)
telnet localhost 8000 (to connect to above port )

kubectl expose pod podName --port=8000 --target-port=80 --name myfirstservice
^^ Kubernetes will create a service that forwards incoming traffic on port 8000 to the pods specified by podName on their port 80. 
This is useful when you want to expose a specific pod to the network and make it accessible within or outside the cluster. 
Other pods or services within the cluster can communicate with this service on port 8000, and if the service is of type NodePort or LoadBalancer, it can also be accessed externally.

kubectl expose pod podName --type=NodePort --port=8000 --target-port=80 --name myfirstservice

